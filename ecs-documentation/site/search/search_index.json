{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"overview/architecture/","text":"Architecture de l'ECS (Entity Component System) L'architecture de l'Entity Component System (ECS) mise en place dans ce projet vise \u00e0 fournir une base modulaire et flexible pour le d\u00e9veloppement du jeu R-Type. Voici une vue d'ensemble de sa structure et de ses \u00e9l\u00e9ments principaux. Vue g\u00e9n\u00e9rale L'ECS est compos\u00e9 de trois \u00e9l\u00e9ments principaux : Entity (Entit\u00e9s) : Repr\u00e9sentent les objets du jeu. Component (Composants) : Fournissent les donn\u00e9es associ\u00e9es \u00e0 une entit\u00e9. System (Syst\u00e8mes) : Contiennent la logique qui manipule les composants des entit\u00e9s. Cette architecture permet une forte d\u00e9couplage entre les donn\u00e9es et la logique, ce qui rend le syst\u00e8me facilement extensible et maintenable. Organisation du projet Voici la structure du dossier ECS : client/ecs/ \u251c\u2500\u2500 Entity.cpp \u251c\u2500\u2500 Entity.hpp \u251c\u2500\u2500 EntityManager.cpp \u251c\u2500\u2500 EntityManager.hpp \u251c\u2500\u2500 NetworkManager.cpp \u251c\u2500\u2500 NetworkManager.hpp \u251c\u2500\u2500 component \u2502 \u251c\u2500\u2500 AComponent.hpp \u2502 \u251c\u2500\u2500 BulletIdComponent.hpp \u2502 \u251c\u2500\u2500 EnnemyIdComponent.hpp \u2502 \u251c\u2500\u2500 HealthComponent.hpp \u2502 \u251c\u2500\u2500 InputComponent.hpp \u2502 \u251c\u2500\u2500 NetworkComponent.hpp \u2502 \u251c\u2500\u2500 PositionComponent.hpp \u2502 \u251c\u2500\u2500 RenderComponent.hpp \u2502 \u251c\u2500\u2500 SpriteComponent.hpp \u2502 \u251c\u2500\u2500 UsernameComponent.hpp \u2502 \u2514\u2500\u2500 VelocityComponent.hpp \u2514\u2500\u2500 system \u251c\u2500\u2500 InputSystem.cpp \u251c\u2500\u2500 InputSystem.hpp \u251c\u2500\u2500 MessageSystem.cpp \u251c\u2500\u2500 MessageSystem.hpp \u251c\u2500\u2500 MovementSystem.cpp \u251c\u2500\u2500 MovementSystem.hpp \u251c\u2500\u2500 RenderSystem.cpp \u2514\u2500\u2500 RenderSystem.hpp Entit\u00e9s et gestion Les entit\u00e9s sont g\u00e9r\u00e9es par la classe EntityManager . Chaque entit\u00e9 poss\u00e8de un identifiant unique (ID) qui permet de les suivre et de les manipuler dans les diff\u00e9rents syst\u00e8mes. Composants Les composants sont des structures de donn\u00e9es pures, sans logique, qui d\u00e9crivent les caract\u00e9ristiques des entit\u00e9s. Ils sont organis\u00e9s dans le dossier component et incluent des \u00e9l\u00e9ments tels que : PositionComponent : G\u00e8re la position spatiale d'une entit\u00e9. HealthComponent : Suivi des points de vie. RenderComponent : Gestion de l'affichage. Syst\u00e8mes Les syst\u00e8mes impl\u00e9mentent la logique du jeu en interagissant avec les composants. Ils incluent des syst\u00e8mes tels que : InputSystem : G\u00e8re les entr\u00e9es utilisateur. MovementSystem : Met \u00e0 jour les positions des entit\u00e9s en fonction des vitesses. RenderSystem : Dessine les entit\u00e9s \u00e0 l'\u00e9cran. Gestion r\u00e9seau La classe NetworkManager g\u00e8re les communications entre le client et le serveur, permettant de synchroniser l'\u00e9tat des entit\u00e9s \u00e0 travers le r\u00e9seau. Diagramme de l'architecture ECS Le diagramme ci-dessus illustre les interactions entre les entit\u00e9s, composants, et syst\u00e8mes, ainsi que le r\u00f4le du gestionnaire d'entit\u00e9s. Points forts de l'architecture Flexibilit\u00e9 : Facile \u00e0 \u00e9tendre avec de nouveaux composants ou syst\u00e8mes. Modularit\u00e9 : D\u00e9couplage des donn\u00e9es et de la logique. Performance : Appropri\u00e9 pour un traitement efficace en boucle de jeu. Cette section donne une vue d\u00e9taill\u00e9e de l'architecture. Si des ajustements sont requis, je suis \u00e0 ta disposition pour \u00e9toffer ou clarifier certains points.","title":"Architecture"},{"location":"overview/architecture/#architecture-de-lecs-entity-component-system","text":"L'architecture de l'Entity Component System (ECS) mise en place dans ce projet vise \u00e0 fournir une base modulaire et flexible pour le d\u00e9veloppement du jeu R-Type. Voici une vue d'ensemble de sa structure et de ses \u00e9l\u00e9ments principaux.","title":"Architecture de l'ECS (Entity Component System)"},{"location":"overview/architecture/#vue-generale","text":"L'ECS est compos\u00e9 de trois \u00e9l\u00e9ments principaux : Entity (Entit\u00e9s) : Repr\u00e9sentent les objets du jeu. Component (Composants) : Fournissent les donn\u00e9es associ\u00e9es \u00e0 une entit\u00e9. System (Syst\u00e8mes) : Contiennent la logique qui manipule les composants des entit\u00e9s. Cette architecture permet une forte d\u00e9couplage entre les donn\u00e9es et la logique, ce qui rend le syst\u00e8me facilement extensible et maintenable.","title":"Vue g\u00e9n\u00e9rale"},{"location":"overview/architecture/#organisation-du-projet","text":"Voici la structure du dossier ECS : client/ecs/ \u251c\u2500\u2500 Entity.cpp \u251c\u2500\u2500 Entity.hpp \u251c\u2500\u2500 EntityManager.cpp \u251c\u2500\u2500 EntityManager.hpp \u251c\u2500\u2500 NetworkManager.cpp \u251c\u2500\u2500 NetworkManager.hpp \u251c\u2500\u2500 component \u2502 \u251c\u2500\u2500 AComponent.hpp \u2502 \u251c\u2500\u2500 BulletIdComponent.hpp \u2502 \u251c\u2500\u2500 EnnemyIdComponent.hpp \u2502 \u251c\u2500\u2500 HealthComponent.hpp \u2502 \u251c\u2500\u2500 InputComponent.hpp \u2502 \u251c\u2500\u2500 NetworkComponent.hpp \u2502 \u251c\u2500\u2500 PositionComponent.hpp \u2502 \u251c\u2500\u2500 RenderComponent.hpp \u2502 \u251c\u2500\u2500 SpriteComponent.hpp \u2502 \u251c\u2500\u2500 UsernameComponent.hpp \u2502 \u2514\u2500\u2500 VelocityComponent.hpp \u2514\u2500\u2500 system \u251c\u2500\u2500 InputSystem.cpp \u251c\u2500\u2500 InputSystem.hpp \u251c\u2500\u2500 MessageSystem.cpp \u251c\u2500\u2500 MessageSystem.hpp \u251c\u2500\u2500 MovementSystem.cpp \u251c\u2500\u2500 MovementSystem.hpp \u251c\u2500\u2500 RenderSystem.cpp \u2514\u2500\u2500 RenderSystem.hpp","title":"Organisation du projet"},{"location":"overview/architecture/#entites-et-gestion","text":"Les entit\u00e9s sont g\u00e9r\u00e9es par la classe EntityManager . Chaque entit\u00e9 poss\u00e8de un identifiant unique (ID) qui permet de les suivre et de les manipuler dans les diff\u00e9rents syst\u00e8mes.","title":"Entit\u00e9s et gestion"},{"location":"overview/architecture/#composants","text":"Les composants sont des structures de donn\u00e9es pures, sans logique, qui d\u00e9crivent les caract\u00e9ristiques des entit\u00e9s. Ils sont organis\u00e9s dans le dossier component et incluent des \u00e9l\u00e9ments tels que : PositionComponent : G\u00e8re la position spatiale d'une entit\u00e9. HealthComponent : Suivi des points de vie. RenderComponent : Gestion de l'affichage.","title":"Composants"},{"location":"overview/architecture/#systemes","text":"Les syst\u00e8mes impl\u00e9mentent la logique du jeu en interagissant avec les composants. Ils incluent des syst\u00e8mes tels que : InputSystem : G\u00e8re les entr\u00e9es utilisateur. MovementSystem : Met \u00e0 jour les positions des entit\u00e9s en fonction des vitesses. RenderSystem : Dessine les entit\u00e9s \u00e0 l'\u00e9cran.","title":"Syst\u00e8mes"},{"location":"overview/architecture/#gestion-reseau","text":"La classe NetworkManager g\u00e8re les communications entre le client et le serveur, permettant de synchroniser l'\u00e9tat des entit\u00e9s \u00e0 travers le r\u00e9seau.","title":"Gestion r\u00e9seau"},{"location":"overview/architecture/#diagramme-de-larchitecture-ecs","text":"Le diagramme ci-dessus illustre les interactions entre les entit\u00e9s, composants, et syst\u00e8mes, ainsi que le r\u00f4le du gestionnaire d'entit\u00e9s.","title":"Diagramme de l'architecture ECS"},{"location":"overview/architecture/#points-forts-de-larchitecture","text":"Flexibilit\u00e9 : Facile \u00e0 \u00e9tendre avec de nouveaux composants ou syst\u00e8mes. Modularit\u00e9 : D\u00e9couplage des donn\u00e9es et de la logique. Performance : Appropri\u00e9 pour un traitement efficace en boucle de jeu. Cette section donne une vue d\u00e9taill\u00e9e de l'architecture. Si des ajustements sont requis, je suis \u00e0 ta disposition pour \u00e9toffer ou clarifier certains points.","title":"Points forts de l'architecture"}]}